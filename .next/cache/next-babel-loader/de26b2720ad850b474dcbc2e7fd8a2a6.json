{"ast":null,"code":"var _jsxFileName = \"/home/dysquino/Documents/source/next-app/components/add-to-do.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useRef } from 'react';\nimport { Form, Input, Row, Button } from 'antd';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst AddToDo = ({\n  setTodo\n}) => {\n  const {\n    0: todoItem,\n    1: setTodoItem\n  } = useState('');\n\n  const handleAdd = () => {\n    const newTodo = {\n      id: uuidv4(),\n      todo: todoItem,\n      isCompleted: false\n    };\n    setTodo(state => {\n      const a = [...state, newTodo];\n      localStorage.setItem('todos', JSON.stringify(a));\n      return a;\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Row, {\n    justify: \"center\",\n    style: {\n      padding: '20px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, __jsx(Form, {\n    layout: \"inline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, __jsx(Form.Item, {\n    rules: [{\n      required: true,\n      message: 'Field must not be empty.'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    onChange: event => {\n      setTodoItem(event.target.value);\n    },\n    placeholder: \"Add to-do item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  })), __jsx(Form.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    type: \"primary\",\n    onClick: handleAdd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, \"Add\")))));\n};\n\nexport default AddToDo;","map":{"version":3,"sources":["/home/dysquino/Documents/source/next-app/components/add-to-do.js"],"names":["React","useState","useRef","Form","Input","Row","Button","v4","uuidv4","AddToDo","setTodo","todoItem","setTodoItem","handleAdd","newTodo","id","todo","isCompleted","state","a","localStorage","setItem","JSON","stringify","padding","required","message","event","target","value"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,GAAtB,EAA2BC,MAA3B,QAAyC,MAAzC;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAC/B,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0BX,QAAQ,CAAC,EAAD,CAAxC;;AAEA,QAAMY,SAAS,GAAG,MAAM;AACtB,UAAMC,OAAO,GAAG;AACdC,MAAAA,EAAE,EAAEP,MAAM,EADI;AAEdQ,MAAAA,IAAI,EAAEL,QAFQ;AAGdM,MAAAA,WAAW,EAAE;AAHC,KAAhB;AAKAP,IAAAA,OAAO,CAAEQ,KAAD,IAAW;AACjB,YAAMC,CAAC,GAAG,CAAC,GAAGD,KAAJ,EAAWJ,OAAX,CAAV;AACAM,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAeJ,CAAf,CAA9B;AACA,aAAOA,CAAP;AACD,KAJM,CAAP;AAKD,GAXD;;AAaA,SACE,4BACE,MAAC,GAAD;AAAK,IAAA,OAAO,EAAC,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEK,MAAAA,OAAO,EAAE;AAAX,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,MAAM,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD,CAAM,IAAN;AACE,IAAA,KAAK,EAAE,CAAC;AAAEC,MAAAA,QAAQ,EAAE,IAAZ;AAAkBC,MAAAA,OAAO,EAAE;AAA3B,KAAD,CADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGE,MAAC,KAAD;AACE,IAAA,QAAQ,EAAGC,KAAD,IAAW;AACnBf,MAAAA,WAAW,CAACe,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAX;AACD,KAHH;AAIE,IAAA,WAAW,EAAC,gBAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF,EAWE,MAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,OAAO,EAAEhB,SAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF,CAXF,CADF,CADF,CADF;AAuBD,CAvCD;;AAyCA,eAAeJ,OAAf","sourcesContent":["import React, { useState, useRef } from 'react';\nimport { Form, Input, Row, Button } from 'antd';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst AddToDo = ({ setTodo }) => {\n  const [todoItem, setTodoItem] = useState('');\n\n  const handleAdd = () => {\n    const newTodo = {\n      id: uuidv4(),\n      todo: todoItem,\n      isCompleted: false,\n    };\n    setTodo((state) => {\n      const a = [...state, newTodo];\n      localStorage.setItem('todos', JSON.stringify(a));\n      return a;\n    });\n  };\n\n  return (\n    <>\n      <Row justify=\"center\" style={{ padding: '20px' }}>\n        <Form layout=\"inline\">\n          <Form.Item\n            rules={[{ required: true, message: 'Field must not be empty.' }]}\n          >\n            <Input\n              onChange={(event) => {\n                setTodoItem(event.target.value);\n              }}\n              placeholder=\"Add to-do item\"\n            ></Input>\n          </Form.Item>\n          <Form.Item>\n            <Button type=\"primary\" onClick={handleAdd}>\n              Add\n            </Button>\n          </Form.Item>\n        </Form>\n      </Row>\n    </>\n  );\n};\n\nexport default AddToDo;\n"]},"metadata":{},"sourceType":"module"}