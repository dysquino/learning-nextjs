{"ast":null,"code":"var _class, _descriptor, _temp;\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\nimport { observable, action } from 'mobx';\nimport axios from 'axios';\nlet CCsStore = (_class = (_temp = class CCsStore {\n  constructor() {\n    _initializerDefineProperty(this, \"ccs\", _descriptor, this);\n  }\n\n  async getDetails() {\n    try {\n      const response = await axios.get(`https://fakerapi.it/api/v1/credit_cards?_quantity=1`);\n\n      if (!response.ok) {\n        throw Error(response.statusText);\n      } else {\n        this.ccs = new CCStore({\n          type: response.data.data[0].type,\n          owner: response.data.data[0].owner,\n          number: response.data.data[0].number,\n          expiration: response.data.data[0].expiration\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"ccs\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {};\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"getDetails\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"getDetails\"), _class.prototype)), _class);\n\nclass CCStore {\n  constructor(props) {\n    Object.assign(this, props);\n  }\n\n}\n\nexport default CCsStore;","map":{"version":3,"sources":["/home/dysquino/Documents/source/next-app/stores/cc-store.js"],"names":["observable","action","axios","CCsStore","getDetails","response","get","ok","Error","statusText","ccs","CCStore","type","data","owner","number","expiration","error","console","log","constructor","props","Object","assign"],"mappings":";;;;;;;;AAAA,SAASA,UAAT,EAAqBC,MAArB,QAAmC,MAAnC;AACA,OAAOC,KAAP,MAAkB,OAAlB;IAEMC,Q,sBAAN,MAAMA,QAAN,CAAe;AAAA;AAAA;AAAA;;AAGb,QACMC,UADN,GACmB;AACjB,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAN,CACpB,qDADoB,CAAvB;;AAIA,UAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AAChB,cAAMC,KAAK,CAACH,QAAQ,CAACI,UAAV,CAAX;AACD,OAFD,MAEO;AACL,aAAKC,GAAL,GAAW,IAAIC,OAAJ,CAAY;AACrBC,UAAAA,IAAI,EAAEP,QAAQ,CAACQ,IAAT,CAAcA,IAAd,CAAmB,CAAnB,EAAsBD,IADP;AAErBE,UAAAA,KAAK,EAAET,QAAQ,CAACQ,IAAT,CAAcA,IAAd,CAAmB,CAAnB,EAAsBC,KAFR;AAGrBC,UAAAA,MAAM,EAAEV,QAAQ,CAACQ,IAAT,CAAcA,IAAd,CAAmB,CAAnB,EAAsBE,MAHT;AAIrBC,UAAAA,UAAU,EAAEX,QAAQ,CAACQ,IAAT,CAAcA,IAAd,CAAmB,CAAnB,EAAsBG;AAJb,SAAZ,CAAX;AAMD;AACF,KAfD,CAeE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;;AAvBY,C,6EACZjB,U;;;;;WAAiB,E;;+DAEjBC,M;;AAsBH,MAAMU,OAAN,CAAc;AACZS,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjBC,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBF,KAApB;AACD;;AAHW;;AAMd,eAAelB,QAAf","sourcesContent":["import { observable, action } from 'mobx';\nimport axios from 'axios';\n\nclass CCsStore {\n  @observable ccs = {};\n\n  @action\n  async getDetails() {\n    try {\n      const response = await axios.get(\n        `https://fakerapi.it/api/v1/credit_cards?_quantity=1`,\n      );\n\n      if (!response.ok) {\n        throw Error(response.statusText);\n      } else {\n        this.ccs = new CCStore({\n          type: response.data.data[0].type,\n          owner: response.data.data[0].owner,\n          number: response.data.data[0].number,\n          expiration: response.data.data[0].expiration,\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\nclass CCStore {\n  constructor(props) {\n    Object.assign(this, props);\n  }\n}\n\nexport default CCsStore;\n"]},"metadata":{},"sourceType":"module"}